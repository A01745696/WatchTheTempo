{"ast":null,"code":"var _jsxFileName = \"/home/facebooker/programming/Javascript/React/watch-the-tempo-dashboard/src/pages/dashboard.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { onAuthStateChanged, signOut } from 'firebase/auth';\nimport { auth } from './firebase-config';\nimport DataTable from 'react-data-table-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = function () {\n  _s();\n\n  //Hooks to set current user and query data\n  const [user, setUser] = useState({});\n  const [query, setQuery] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }); //Check if user changed and update it\n\n  onAuthStateChanged(auth, currentUser => {\n    if (currentUser) {\n      setUser(currentUser);\n    }\n  }); //Logout function\n\n  const logout = async () => {\n    await signOut(auth);\n    window.location.href = '/login';\n  }; //fetch function to retrieve data from API on port 5000\n\n\n  const fetchData = async () => {\n    fetch(\"http://127.0.0.1:5000/test\").then(response => response.text()).then(data => {\n      //fetch(\"https://64.227.109.201:8443/test\").then((response) => response.text()).then((data) => {\n      //Once we get the data split it so we can process it\n      var rawData = data.slice(1, -1);\n      rawData = rawData.split(\"},\"); //Stores the data on a list\n\n      var prodData = []; //Map the data and reassemble it into proper format\n\n      rawData.map(data => {\n        if (data[data.length - 1] === \"}\") {\n          prodData.push(JSON.parse(data));\n        } else {\n          prodData.push(JSON.parse(data + \"}\"));\n        }\n      }); //Set final data on hook\n\n      setQuery(prodData);\n    });\n  }; //Defines the format for the table depending on data\n\n\n  const columns = [{\n    name: 'Username',\n    selector: 'username'\n  }, {\n    name: 'Password',\n    selector: 'password'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Login successful\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 40\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 45\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Email: \", user === null || user === void 0 ? void 0 : user.email]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 44\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 49\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"UID: \", user === null || user === void 0 ? void 0 : user.uid]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 40\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 45\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: logout,\n      children: \"Logout User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: query !== undefined && /*#__PURE__*/_jsxDEV(DataTable, {\n        columns: columns,\n        data: query\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Dashboard, \"TiqxgZVhmsM2xNZLE5ZmgMGZ3OE=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/facebooker/programming/Javascript/React/watch-the-tempo-dashboard/src/pages/dashboard.js"],"names":["useState","useEffect","onAuthStateChanged","signOut","auth","DataTable","Dashboard","user","setUser","query","setQuery","fetchData","currentUser","logout","window","location","href","fetch","then","response","text","data","rawData","slice","split","prodData","map","length","push","JSON","parse","columns","name","selector","email","uid","undefined"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { onAuthStateChanged, signOut } from 'firebase/auth';\nimport { auth } from './firebase-config';\nimport DataTable from 'react-data-table-component';\n\nconst Dashboard = function() {\n\n  //Hooks to set current user and query data\n  const [user, setUser] = useState({});\n  const [query, setQuery] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  });\n\n  //Check if user changed and update it\n  onAuthStateChanged(auth, (currentUser) => {\n      if(currentUser) {\n        setUser(currentUser);\n      }\n  });\n\n  //Logout function\n  const logout = async () => {\n    await signOut(auth);\n    window.location.href='/login';\n  };\n\n  //fetch function to retrieve data from API on port 5000\n  const fetchData = async () => {\n    fetch(\"http://127.0.0.1:5000/test\").then((response) => response.text()).then((data) => {\n    //fetch(\"https://64.227.109.201:8443/test\").then((response) => response.text()).then((data) => {\n    //Once we get the data split it so we can process it\n    var rawData = data.slice(1, -1);\n    rawData = rawData.split(\"},\");\n\n    //Stores the data on a list\n    var prodData = [];\n\n    //Map the data and reassemble it into proper format\n    rawData.map((data) => {\n      if(data[data.length-1] === \"}\") {\n        prodData.push(JSON.parse(data));\n      }\n      else {\n        prodData.push(JSON.parse(data+\"}\"));\n      }\n    });\n    //Set final data on hook\n    setQuery(prodData);\n  });\n  };\n\n  //Defines the format for the table depending on data\n  const columns = [\n      {\n          name: 'Username',\n          selector: 'username'\n      },\n      {\n          name: 'Password',\n          selector: 'password'\n      }\n  ];\n\n  return (\n      <div>\n          <span>Login successful</span><br/><br/>\n          <span>Email: {user?.email}</span><br/><br/>\n          <span>UID: {user?.uid}</span><br/><br/>\n          <button onClick={logout}>Logout User</button>\n          <div>\n            {query !== undefined &&\n              <DataTable columns={columns} data={query}/>\n            }\n          </div>\n      </div>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}